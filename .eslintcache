[{"/home/afif-firdaus/Documents/Glints Academy/mini-pro/src/Components/NavbarComp.js":"1"},{"size":7652,"mtime":1609220987967,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1m0g8k3","/home/afif-firdaus/Documents/Glints Academy/mini-pro/src/Components/NavbarComp.js",["6","7","8","9","10","11"],{"ruleId":"12","severity":1,"message":"13","line":24,"column":8,"nodeType":"14","messageId":"15","endLine":24,"endColumn":13},{"ruleId":"12","severity":1,"message":"16","line":35,"column":9,"nodeType":"14","messageId":"15","endLine":35,"endColumn":13},{"ruleId":"12","severity":1,"message":"17","line":54,"column":11,"nodeType":"14","messageId":"15","endLine":54,"endColumn":22},{"ruleId":"18","severity":1,"message":"19","line":63,"column":13,"nodeType":"20","endLine":105,"endColumn":4},{"ruleId":"18","severity":1,"message":"21","line":78,"column":22,"nodeType":"22","endLine":78,"endColumn":49},{"ruleId":"23","severity":1,"message":"24","line":140,"column":17,"nodeType":"25","endLine":144,"endColumn":18},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'user' is assigned a value but never used.","'buttonLabel' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","Assignments to the 'userName' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement"]